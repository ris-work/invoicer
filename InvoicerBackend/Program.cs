using System;
using System.IO.Compression;
using System.Security.AccessControl;
using System.Security.Principal;
using System.Text;
using System.Text.Json;
using System.Transactions;
using InvoicerBackend;
using Microsoft.AspNetCore.ResponseCompression;
using Microsoft.EntityFrameworkCore;
using MyAOTFriendlyExtensions;
using RV.InvNew.Common;
using Tomlyn.Syntax;

Console.WriteLine("CWD: {0}", Directory.GetCurrentDirectory());
Console.WriteLine("[common] CWD: {0}", Config.GetCWD());
Config.Initialize();

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddResponseCompression(o =>
{
    o.EnableForHttps = true;
    o.Providers.Add<BrotliCompressionProvider>();
    o.Providers.Add<GzipCompressionProvider>();
});
builder.Services.Configure<BrotliCompressionProviderOptions>(options =>
{
    options.Level = CompressionLevel.Optimal;
});

builder.Services.Configure<GzipCompressionProviderOptions>(options =>
{
    options.Level = CompressionLevel.Optimal;
});
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddHttpLogging(o =>
{
    //o.LoggingFields = Microsoft.AspNetCore.HttpLogging.HttpLoggingFields.All;
});
builder.Services.AddHttpLogging();

var app = builder.Build();
app.UseResponseCompression();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
    app.UseHttpLogging();
}

app.AddEarlierDesignedEndpoints();
app.AddNotificationsHandler();
app.MapPost(
        "/NewJournalEntry",
        (AuthenticatedRequest<JournalEntry> AJE) =>
        {
            using (var ctx = new NewinvContext() { })
            {
                JournalEntry AccJE = AJE.Get();
                using var Transaction = ctx.Database.BeginTransaction(
                    System.Data.IsolationLevel.Serializable
                );
                InvoicerBackend.JournalEntries.AddJournalEntry(ctx, AccJE);
                ctx.SaveChanges();
                Transaction.Commit();
            }
        }
    )
    .WithName("NewJournalEntry")
    .WithOpenApi();

app.AddEndpoint<string>(
    "AutogeneratedClockEndpoint",
    (R) =>
    {
        return new SingleValueString { response = DateTime.UtcNow.ToString("O") };
    },
    "VIEW_SERVER_TIME"
);

app.AddEndpointWithBearerAuth<string>(
    "AutogeneratedClockEndpointBearerAuth",
    (R) =>
    {
        return new SingleValueString { response = DateTime.UtcNow.ToString("O") };
    },
    "VIEW_SERVER_TIME"
);

app.AddEndpointWithBearerAuth<long>(
    "CatalogueRead",
    (R) =>
    {
        Console.WriteLine($"==== REQUESTED CATALOGUE ID {R}");
        //var SafeR = ((Catalogue)R).RemoveField("Id");
        Catalogue A;
        using (var ctx = new NewinvContext())
        {
            A = ctx.Catalogues.Where(a => a.Itemcode == (long)R).First();
        }
        Console.WriteLine(
            $"CATALOGUE: Got: {A.Itemcode}, {A.Description}, {JsonSerializer.Serialize(A)}"
        );

        return A;
    },
    "Refresh"
);

app.AddEndpointWithBearerAuth<Catalogue>(
    "CatalogueEdit",
    (R) =>
    {
        Console.WriteLine($"==== REQUESTED EDIT CATALOGUE ID {R}");
        //var SafeR = ((Catalogue)R).RemoveField("Id");

        Catalogue SafeR = (Catalogue)R.RemoveField("Itemcode");
        Catalogue A;

        using (var ctx = new NewinvContext())
        {
            A = ctx.Catalogues.Where(a => a.Itemcode == SafeR.Itemcode).First();
            A.ApplyChangesFromFiltered([], JsonSerializer.Serialize(SafeR));
            ctx.SaveChanges();
        }
        Console.WriteLine(
            $"CATALOGUE: Got: {A.Itemcode}, {A.Description}, {JsonSerializer.Serialize(A)}"
        );

        return A;
    },
    "Refresh"
);

app.AddEndpointWithBearerAuth<object>(
    "CatalogueAdd",
    (R) =>
    {
        var SafeR = ((Catalogue)R).RemoveField("Itemcode");
        using (var ctx = new NewinvContext())
        {
            ctx.Catalogues.Add(SafeR);
            ctx.SaveChanges();
        }

        return Results.Accepted();
    },
    "Refresh"
);

app.AddEndpointWithBearerAuth<string>(
    "GetMyDenyList",
    (AS, LoginInfo) =>
    {
        string[] DeniedList;
        using (var ctx = new NewinvContext())
        {
            DeniedList = ctx
                .UsersFieldLevelAccessControlsDenyLists.Where(e => e.UserId == LoginInfo.UserId)
                .Select(e => e.DeniedField)
                .ToArray();
        }
        return DeniedList;
    },
    "Refresh"
);
app.AddEndpointWithBearerAuth<string>(
    "GetUniversalDenyList",
    (AS, LoginInfo) =>
    {
        string[] DeniedList;
        using (var ctx = new NewinvContext())
        {
            DeniedList = ctx
                .UsersFieldLevelAccessControlsDenyLists.Where(e => e.UserId == LoginInfo.UserId)
                .Select(e => e.DeniedField)
                .ToArray();
        }
        return DeniedList;
    },
    "Refresh"
);

app.AddEndpointWithBearerAuth<string>(
    "BatchRead",
    (AS, LoginInfo) =>
    {
        List<Inventory> Batches;
        using (var ctx = new NewinvContext())
        {
            Batches = ctx.Inventories.Where(e => e.Itemcode == long.Parse((string)AS)).ToList();
        }
        return Batches;
    },
    "Refresh"
);

app.AddEndpointWithBearerAuth<Inventory>(
    "BatchEdit",
    (AS, LoginInfo) =>
    {
        var Batch = (Inventory)AS;
        var SafeBatch = Batch.RemoveField("Itemcode").RemoveField("Batchcode");

        using (var ctx = new NewinvContext())
        {
            var BatchCurrent = ctx
                .Inventories.Where(e =>
                    e.Itemcode == Batch.Itemcode && e.Batchcode == Batch.Itemcode
                )
                .First();
            BatchCurrent.ApplyChangesFromFiltered([], JsonSerializer.Serialize(Batch));
            ctx.SaveChanges();
            Batch = BatchCurrent;
        }
        return Batch;
    },
    "Refresh"
);

System.Console.WriteLine("Done setting up!");
app.Run();

internal record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)
{
    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
}
